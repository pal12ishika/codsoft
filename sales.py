# -*- coding: utf-8 -*-
"""sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M2xxv57DaRBjGoCU3vH6HSgbQ1SO5M8c
"""



import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_log_error,r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

filepath='/content/advertising.csv'
sales=pd.read_csv(filepath)

sales

sales.head()

sales.tail()

sales.describe

sales.shape

sales.info()

missing_value=sales.isnull().sum()
print(missing_value)

sns.pairplot(sales, x_vars=['TV','Radio','Newspaper'], y_vars='Sales',kind='scatter')
plt.show()

fig, axs= plt.subplots(3, figsize=(4,5))
plt1= sns.boxplot(sales['TV'], ax=axs[0])
plt2=sns.boxplot(sales['Newspaper'], ax=axs[1])
plt3=sns.boxplot(sales['Radio'], ax=axs[2])
plt.tight_layout()

sales['TV'].plot.hist(bins=10)

sales['Radio'].plot.hist(bins=10, color="pink", xlabel="Radio")

sales['Newspaper'].plot.hist(bins=10, color="yellow", xlabel="newspaper")

sns.heatmap(sales.corr(), annot= True)
plt.show()

features=list(sales.corr()['Sales'][(sales.corr()['Sales']>+0.5)|(sales.corr()['Sales']<-0.5)].index)
print(features)

X=sales['TV']
y=sales['Sales']

X= X.values.reshape(-1,1)

y

print(X.shape, y.shape)

X_train, X_test, y_train ,y_test= train_test_split(X,y,test_size=0.33)

print(X_train.shape,y_train.shape)

X_train

X_test

y_train

y_test

X_train=X_train.astype(int)
y_train=y_train.astype(int)
X_test=X_test.astype(int)
y_test=y_test.astype(int)

Lr=LinearRegression()
Lr.fit(X_train,y_train)

y_pred=Lr.predict(X_test)

from sklearn.metrics import r2_score

r2_score(y_test,y_pred)

plt.scatter(y_test,y_pred,c='g')



















